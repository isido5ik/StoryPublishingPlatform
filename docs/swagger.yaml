basePath: /
definitions:
  dtos.AddCommentInput:
    properties:
      comment_text:
        type: string
    required:
    - comment_text
    type: object
  dtos.AddPostInput:
    properties:
      content:
        type: string
      title:
        type: string
    required:
    - content
    - title
    type: object
  dtos.Post:
    properties:
      author:
        type: string
      comments:
        type: integer
      content:
        type: string
      created_at:
        type: string
      likes:
        type: integer
      post_id:
        type: integer
      title:
        type: string
      user_id:
        type: integer
    type: object
  dtos.SignInInput:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dtos.SignUpInput:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  dtos.UpdateCommentInput:
    properties:
      comment_text:
        type: string
    required:
    - comment_text
    type: object
  dtos.UpdateStoryInput:
    properties:
      content:
        type: string
    type: object
  dtos.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      password:
        type: string
      user_id:
        type: integer
      username:
        type: string
    type: object
  http.errorResponse:
    properties:
      message:
        type: string
    type: object
  http.getMyStoriesResponse:
    properties:
      stories:
        items:
          $ref: '#/definitions/dtos.Post'
        type: array
      username:
        type: string
    type: object
  http.getStoriesResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/dtos.Post'
        type: array
    type: object
  http.getUsersResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/dtos.User'
        type: array
    type: object
host: localhost:8000
info:
  contact: {}
  description: Rest Api Server
  title: Story Publishing Platform
  version: "1.0"
paths:
  /api/admin/users:
    get:
      consumes:
      - application/json
      description: get all users
      operationId: get-all-users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.getUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get Users
      tags:
      - users
  /api/admin/users/{:user_id}:
    delete:
      consumes:
      - application/json
      description: delete user by id
      operationId: delete-story-by-id
      parameters:
      - description: User ID
        in: path
        name: :user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete User By Id
      tags:
      - users
    get:
      consumes:
      - application/json
      description: get user by id
      operationId: get-story-by-id
      parameters:
      - description: User ID
        in: path
        name: :user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get User By Id
      tags:
      - users
  /api/auth/sign-in:
    post:
      consumes:
      - application/json
      description: login
      operationId: login
      parameters:
      - description: credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dtos.SignInInput'
      produces:
      - application/json
      responses:
        "200":
          description: token
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.errorResponse'
      summary: SignIn
      tags:
      - auth
  /api/auth/sign-up:
    post:
      consumes:
      - application/json
      description: create account
      operationId: create-account
      parameters:
      - description: account info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dtos.SignUpInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.errorResponse'
      summary: SignUp
      tags:
      - auth
  /api/stories:
    get:
      consumes:
      - application/json
      description: get all stories
      operationId: get-all-stories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.getStoriesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.errorResponse'
      summary: Get All Stories
      tags:
      - stories
    post:
      consumes:
      - application/json
      description: create story
      operationId: create-story
      parameters:
      - description: story info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dtos.AddPostInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create Story
      tags:
      - stories
  /api/stories/{:story_id}:
    delete:
      consumes:
      - application/json
      description: delete story by id
      operationId: delete-story-by-id
      parameters:
      - description: Story ID
        in: path
        name: :story_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete Story By Id
      tags:
      - stories
    get:
      consumes:
      - application/json
      description: get story by id
      operationId: get-story-by-id
      parameters:
      - description: Story ID
        in: path
        name: :story_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.Post'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get Story By Id
      tags:
      - stories
    put:
      consumes:
      - application/json
      description: update story by id
      operationId: update-story-by-id
      parameters:
      - description: Story ID
        in: path
        name: :story_id
        required: true
        type: integer
      - description: account info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateStoryInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update Story By Id
      tags:
      - stories
  /api/stories/{:story_id}/comment:
    post:
      consumes:
      - application/json
      description: add comment
      operationId: add-comment
      parameters:
      - description: Story ID
        in: path
        name: :story_id
        required: true
        type: integer
      - description: comment info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dtos.AddCommentInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.errorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Add Comment
      tags:
      - Like and Comment
  /api/stories/{:story_id}/comment/{:comment_id}:
    delete:
      consumes:
      - application/json
      description: delete comment
      operationId: delete-comment
      parameters:
      - description: Story ID
        in: path
        name: :story_id
        required: true
        type: integer
      - description: Comment ID
        in: path
        name: :comment_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.errorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete Comment
      tags:
      - Like and Comment
    post:
      consumes:
      - application/json
      description: reply to comment
      operationId: reply-to-comment
      parameters:
      - description: Story ID
        in: path
        name: :story_id
        required: true
        type: integer
      - description: Comment ID
        in: path
        name: :comment_id
        required: true
        type: integer
      - description: comment info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dtos.AddCommentInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.errorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Reply to Comment
      tags:
      - Like and Comment
    put:
      consumes:
      - application/json
      description: update comment
      operationId: update-comment
      parameters:
      - description: Story ID
        in: path
        name: :story_id
        required: true
        type: integer
      - description: Comment ID
        in: path
        name: :comment_id
        required: true
        type: integer
      - description: comment info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateCommentInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.errorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update Comment
      tags:
      - Like and Comment
  /api/stories/{:story_id}/like:
    delete:
      consumes:
      - application/json
      description: remove like
      operationId: remove-like
      parameters:
      - description: Story ID
        in: path
        name: :story_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.errorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Remove Like
      tags:
      - Like and Comment
    put:
      consumes:
      - application/json
      description: like story
      operationId: like-story
      parameters:
      - description: Story ID
        in: path
        name: :story_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.errorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Like Story
      tags:
      - Like and Comment
  /api/stories/my:
    get:
      consumes:
      - application/json
      description: get users stories
      operationId: get-my-story
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.getMyStoriesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get My Story
      tags:
      - stories
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
